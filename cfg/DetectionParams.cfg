#!/usr/bin/env python

## Pointcloud detection parameters
# Parameters are listed in the order in which the corresponding
# operations are executed (except for deprecated parameters).

PACKAGE='vofod'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params_general = gen.add_group("General parameters");
params_general.add("ground_points_min_weight", double_t, 1, "point needs at least this weight in the TSDF map to be considered", 5.0, 0.0, 10000.0);
params_general.add("ground_points_max_distance", double_t, 1, "points closer than this to the ground point cluster will be classified as near ground", 0.7, 0.0, 10.0);
params_general.add("input__voxel_grid_filter", bool_t, 1, "preprocessing of the input pointcloud using a VoxelGrid filter", True);
params_general.add("output__position_sigma", double_t, 1, "covariance of the target's position will be scaled by this value", 0.25, 0.0, 10.0);

params_vmap = gen.add_group("Voxel map updating parameters");
params_vmap.add("voxel_map__scores__point", double_t, 1, "voxels with a point from a pointcloud will be updated using this value", 0.0, -1000.0, 0.0);
params_vmap.add("voxel_map__scores__unknown", double_t, 1, "voxels with a point from a pointcloud, classified as in an unknown cluster, will be updated using this value", -740.0, -1000.0, 0.0);
params_vmap.add("voxel_map__scores__ray", double_t, 1, "voxels intersected by a ray from a pointcloud will be updated using this value", -1000.0, -1000.0, 0.0);
params_vmap.add("voxel_map__thresholds__apriori_map", double_t, 1, "voxels with a value higher than this are considered parts of the apriori map and will not be modified", 0.0, -1000.0, 0.0);
params_vmap.add("voxel_map__thresholds__new_obstacles", double_t, 1, "voxels with a value higher than this are considered parts of the background", -300.0, -1000.0, 0.0);
params_vmap.add("voxel_map__thresholds__sure_obstacles", double_t, 1, "voxels with a value higher than this are considered *sure* parts of the background", -100.0, -1000.0, 0.0);
params_vmap.add("voxel_map__thresholds__frontiers", double_t, 1, "voxels with a value higher than this but lower than the threshold for new obstacles are considered to be frontiers and may connect clusters to ground, causing them to not be classified as a detection", -750.0, -1000.0, 0.0);

params_classif = gen.add_group("Cluster classification parameters");
params_classif.add("classification__min_points", int_t, 1, "minimal number of points for a cluster to be classified as a detection (MAV)", 4, 0, 100);
params_classif.add("classification__max_size", double_t, 1, "maximal bounding box size of a cluster to be classified as a detection (MAV)", 3.0, 0.0, 100.0);
params_classif.add("classification__max_distance", double_t, 1, "maximal distance of a cluster to be classified as a detection (MAV)", 18.0, 0.0, 100.0);
params_classif.add("classification__max_explore_distance", double_t, 1, "a maximal neighborhood around a cluster that will be searched when looking for a connection to ground (if exceeded, the cluster will be classified as unknown)", 18.0, 0.0, 100.0);
params_classif.add("classification__min_ground_distance", double_t, 1, "minimal distance of a voxel from ground to be considered free", 1.5, 0.0, 100.0);
params_classif.add("classification__min_voxel_weight", double_t, 1, "minimal weight of a voxel to be considered free", 3.0, 0.0, 100.0);

params_raycast = gen.add_group("Raycasting parameters");
params_raycast.add("raycast__pause", bool_t, 1, "temporarily disable raycasting", False);
params_raycast.add("raycast__new_update_rule", bool_t, 1, "whether to use the new (theoreticall sound) update rule or the old (tested) one", False);
params_raycast.add("raycast__max_distance", double_t, 1, "maximal distance of a ray to be cast", 50.0, 0.0, 200.0);
params_raycast.add("raycast__min_intensity", double_t, 1, "minimal intensity of a point to be raycast", 0.0, 0.0, 1000.0);
params_raycast.add("raycast__weight_coefficient", double_t, 1, "coefficient of the exponential filter on map value raycast update", 0.5, 0.0, 1.0);

params_sepclusters = gen.add_group("Separate background cluster removal parameters");
params_sepclusters.add("sepclusters__pause", bool_t, 1, "temporarily disable separate background cluster removal", False);
params_sepclusters.add("sepclusters__max_bg_distance", double_t, 1, "maximal distance of an uncertain cluster from a certain background cluster to not be removed", 0.7, 0.0, 100.0);
params_sepclusters.add("sepclusters__min_sure_points", int_t, 1, "minimal number of sure points for a cluster to be classified as a confident background", 4, 0, 100);

exit(gen.generate(PACKAGE, "vofod", "DetectionParams"))
